package ies.morilla.ibanez.jesus.boletin7.components;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.ListCellRenderer;
import javax.swing.SwingUtilities;

import ies.morilla.ibanez.jesus.boletin7.models.Task;

public class TaskRenderer extends JLabel implements ListCellRenderer<Task> {

	private static final long serialVersionUID = 1L;

	public TaskRenderer() {
        setOpaque(true);
    }

	@Override
	public Component getListCellRendererComponent(JList<? extends Task> list, Task task, int index,
	                                              boolean isSelected, boolean cellHasFocus) {
	    String taskInfo = "<html>" +
	            "<b>" + task.getTitle() + "</b><br>" +
	            task.getDescription() + "<br>" +
	            "<font color='gray'>" + task.getStatus() + " - " + task.getDate() + "</font>" +
	            "</html>";

	    setText(taskInfo);
	    setPreferredSize(new Dimension(200, getPreferredSize().height));

	    if (isSelected) {
	        setBackground(list.getSelectionBackground());
	        setForeground(list.getSelectionForeground());
	    } else {
	        setBackground(list.getBackground());
	        setForeground(list.getForeground());
	    }

	    setEnabled(list.isEnabled());
	    setFont(list.getFont());
	    setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));

	    list.addMouseListener(new MouseAdapter() {
	        @Override
	        public void mouseReleased(MouseEvent e) {
	            if (SwingUtilities.isRightMouseButton(e)) {
	                int index = list.locationToIndex(e.getPoint());
	                list.setSelectedIndex(index); 

	                JPopupMenu popupMenu = new JPopupMenu();
	                JMenuItem deleteItem = new JMenuItem("Eliminar");
	                deleteItem.addActionListener(new ActionListener() {
	                    @Override
	                    public void actionPerformed(ActionEvent actionEvent) {
	                    	
	                    }
	                });
	                popupMenu.add(deleteItem);
	                popupMenu.show(list, e.getX(), e.getY());
	            }
	        }
	    });

	    return this;
	}
}

